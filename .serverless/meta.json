{
  "C:\\Users\\Alonso\\Desktop\\lambda_crud": {
    "versionSfCore": null,
    "versionFramework": "4.1.19",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeServiceName": null,
    "servicePath": "C:\\Users\\Alonso\\Desktop\\lambda_crud",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "crud-lambda-api",
      "frameworkVersion": "3",
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements"
      ],
      "provider": {
        "name": "aws",
        "region": "us-east-1",
        "runtime": "python3.11",
        "memorySize": 512,
        "timeout": 120,
        "stage": "dev",
        "deploymentBucket": {
          "name": "api.services.${self:provider.stage}",
          "tags": {
            "PROY": "API",
            "COMPONENT": "CRUD-LAMBDA-SERVICE"
          }
        },
        "tags": {
          "ENV": "${self:provider.stage}",
          "COMPONENT": "CRUD-LAMBDA-SERVICE",
          "PROY": "API"
        },
        "logRetentionInDays": 14,
        "environment": {
          "STAGE": "${self:provider.stage}",
          "DB_HOST": "${env:DB_HOST}",
          "DB_USERNAME": "${env:DB_USERNAME}",
          "DB_PASSWORD": "<REDACTED>",
          "DB_NAME": "${env:DB_NAME}"
        }
      },
      "package": {
        "individually": true,
        "patterns": [
          "!Makefile",
          "!poetry.lock",
          "!pyproject.toml",
          "!README.md",
          "!tests/**",
          "!docs/**",
          "!node_modules/**",
          "!.venv/**",
          "!.serverless/**",
          "!package.json",
          "!package-lock.json",
          "!.pytest_cache",
          "!.hypothesis",
          "!.env",
          "!env.example",
          "!.flake8",
          "!.editorconfig",
          "!.pre-commit-config.yaml",
          "!deploy/**",
          "!.mypy_cache/**",
          "!volume/**",
          "!.git/**",
          "!.tags/**",
          "!.dockerignore"
        ]
      },
      "custom": {
        "pythonRequirements": {
          "dockerizePip": true,
          "slim": true
        }
      },
      "functions": {
        "app": {
          "handler": "crud.app_handler.handler",
          "events": [
            {
              "http": {
                "path": "/{proxy+}",
                "method": "any"
              }
            }
          ]
        }
      }
    },
    "serviceRawFile": "service: crud-lambda-api\r\nframeworkVersion: \"3\"\r\n\r\nplugins:\r\n  - serverless-wsgi\r\n  - serverless-python-requirements\r\n\r\nprovider:\r\n  name: aws\r\n  region: us-east-1\r\n  runtime: python3.11\r\n  memorySize: 512\r\n  timeout: 120\r\n  stage: ${opt:stage, 'dev'}\r\n  deploymentBucket:\r\n    name: api.services.${self:provider.stage}\r\n    tags:\r\n      PROY: API\r\n      COMPONENT: CRUD-LAMBDA-SERVICE\r\n  tags:\r\n    ENV: ${self:provider.stage}\r\n    COMPONENT: CRUD-LAMBDA-SERVICE\r\n    PROY: API\r\n  logRetentionInDays: 14\r\n  environment:\r\n    STAGE: ${self:provider.stage}\r\n    DB_HOST: ${env:DB_HOST}\r\n    DB_USERNAME: ${env:DB_USERNAME}\r\n    DB_PASSWORD: ${env:DB_PASSWORD}\r\n    DB_NAME: ${env:DB_NAME}\r\n\r\npackage:\r\n  individually: true\r\n  patterns:\r\n    - \"!Makefile\"\r\n    - \"!poetry.lock\"\r\n    - \"!pyproject.toml\"\r\n    - \"!README.md\"\r\n    - \"!tests/**\"\r\n    - \"!docs/**\"\r\n    - \"!node_modules/**\"\r\n    - \"!.venv/**\"\r\n    - \"!.serverless/**\"\r\n    - \"!package.json\"\r\n    - \"!package-lock.json\"\r\n    - \"!.pytest_cache\"\r\n    - \"!.hypothesis\"\r\n    - \"!.env\"\r\n    - \"!env.example\"\r\n    - \"!.flake8\"\r\n    - \"!.editorconfig\"\r\n    - \"!.pre-commit-config.yaml\"\r\n    - \"!deploy/**\"\r\n    - \"!.mypy_cache/**\"\r\n    - \"!volume/**\"\r\n    - \"!.git/**\"\r\n    - \"!.tags/**\"\r\n    - \"!.dockerignore\"\r\n\r\ncustom:\r\n  pythonRequirements:\r\n    dockerizePip: true\r\n    slim: true\r\n\r\nfunctions:\r\n  app:\r\n    handler: crud.app_handler.handler\r\n    events:\r\n      - http:\r\n          path: /{proxy+}\r\n          method: any\r\n",
    "command": [
      "plugin",
      "install"
    ],
    "options": {
      "name": "serverless-python-requirements"
    },
    "error": null,
    "machineId": "3afd8fb284cb5c463485927db95563c5",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}